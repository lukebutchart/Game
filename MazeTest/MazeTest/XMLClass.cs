using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;

namespace MazeTest
{
    class XMLClass
    {
        public void Run()
        {
            //XMLReadAbilitiesPrint("Fireball", 3);
        }

        /// <summary>
        /// This writes a new Abilities.xml with basic abilities.
        /// </summary>
        public void XMLWriteAbilities()
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            XmlWriter writer = XmlWriter.Create("Abilities.xml", settings);
            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");
            writer.WriteStartElement("Abilities");

            writer.WriteStartElement("Ability");
            writer.WriteAttributeString("ID", "1");
            writer.WriteAttributeString("Name", "Freeze");
            writer.WriteElementString("DamageEffect", "Ice");
            writer.WriteElementString("StatusEffect", "Freeze");
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "1");
            writer.WriteAttributeString("Cost", "100");
            writer.WriteAttributeString("Power", "6");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "2");
            writer.WriteAttributeString("Cost", "110");
            writer.WriteAttributeString("Power", "8");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "3");
            writer.WriteAttributeString("Cost", "120");
            writer.WriteAttributeString("Power", "10");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "4");
            writer.WriteAttributeString("Cost", "130");
            writer.WriteAttributeString("Power", "12");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "5");
            writer.WriteAttributeString("Cost", "140");
            writer.WriteAttributeString("Power", "14");
            writer.WriteEndElement();
            writer.WriteEndElement();

            writer.WriteStartElement("Ability");
            writer.WriteAttributeString("ID", "2");
            writer.WriteAttributeString("Name", "Fireball");
            writer.WriteElementString("DamageEffect", "Fire");
            writer.WriteElementString("StatusEffect", "Burn");
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "1");
            writer.WriteAttributeString("Cost", "100");
            writer.WriteAttributeString("Power", "6");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "2");
            writer.WriteAttributeString("Cost", "110");
            writer.WriteAttributeString("Power", "8");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "3");
            writer.WriteAttributeString("Cost", "120");
            writer.WriteAttributeString("Power", "10");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "4");
            writer.WriteAttributeString("Cost", "130");
            writer.WriteAttributeString("Power", "12");
            writer.WriteEndElement();
            writer.WriteStartElement("Stats");
            writer.WriteAttributeString("Level", "5");
            writer.WriteAttributeString("Cost", "140");
            writer.WriteAttributeString("Power", "14");
            writer.WriteEndElement();
            writer.WriteEndElement();

            writer.WriteEndDocument();

            writer.Flush();
            writer.Close();
        }

        public void XMLReadAbilitiesPrint(string abilityName, int abilityLevel)
        {
            XmlReader reader = XmlReader.Create("Abilities.xml");

            while (reader.Read())
            {
                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Abilities")
                {
                    reader.Read();
                    while (reader.Depth >= 1)
                    {
                        reader.Read();
                        if (reader.NodeType == XmlNodeType.Element && reader.Name == "Ability" && reader.GetAttribute(1) == abilityName)
                        {
                            Console.WriteLine("Name   = " + reader.GetAttribute(1));

                            while (reader.NodeType != XmlNodeType.EndElement)
                            {
                                reader.Read();

                                if (reader.Name == "DamageEffect")
                                {
                                    while (reader.NodeType != XmlNodeType.EndElement)
                                    {
                                        reader.Read();
                                        if (reader.NodeType == XmlNodeType.Text)
                                        {
                                            Console.WriteLine("DamEff = " + reader.Value);
                                        }
                                    }
                                    reader.Read();
                                }

                                if (reader.Name == "StatusEffect")
                                {
                                    while (reader.NodeType != XmlNodeType.EndElement)
                                    {
                                        reader.Read();
                                        if (reader.NodeType == XmlNodeType.Text)
                                        {
                                            Console.WriteLine("StaEff = " + reader.Value);
                                        }
                                    }
                                    reader.Read();
                                }

                                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Stats" && reader.GetAttribute(0) == abilityLevel.ToString())
                                {
                                    Console.WriteLine("Level  = " + reader.GetAttribute(0));
                                    Console.WriteLine("Cost   = " + reader.GetAttribute(1));
                                    Console.WriteLine("Power  = " + reader.GetAttribute(2));

                                    while (reader.NodeType != XmlNodeType.EndElement)
                                    {
                                        reader.Read();
                                    }
                                } //end if

                            }
                        }
                    }
                }
            }
        }

        public Ability XMLReadAbilitiesReturn(string abilityName, int abilityLevel)
        {
            XmlReader reader = XmlReader.Create("Abilities.xml");
            Ability ability = new Ability();

            while (reader.Read())
            {
                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Abilities")
                {
                    reader.Read();
                    while (reader.Depth >= 1)
                    {
                        reader.Read();
                        if (reader.NodeType == XmlNodeType.Element && reader.Name == "Ability" && reader.GetAttribute(1) == abilityName)
                        {
                            //Console.WriteLine("Name   = " + reader.GetAttribute(1));
                            ability.Name = reader.GetAttribute(1);

                            while (reader.NodeType != XmlNodeType.EndElement)
                            {
                                reader.Read();

                                if (reader.Name == "DamageEffect")
                                {
                                    while (reader.NodeType != XmlNodeType.EndElement)
                                    {
                                        reader.Read();
                                        if (reader.NodeType == XmlNodeType.Text)
                                        {
                                            //Console.WriteLine("DamEff = " + reader.Value);
                                            ability.DamageEffect = reader.Value;
                                        }
                                    }
                                    reader.Read();
                                }

                                if (reader.Name == "StatusEffect")
                                {
                                    while (reader.NodeType != XmlNodeType.EndElement)
                                    {
                                        reader.Read();
                                        if (reader.NodeType == XmlNodeType.Text)
                                        {
                                            //Console.WriteLine("StaEff = " + reader.Value);
                                            ability.StatusEffect = reader.Value;
                                        }
                                    }
                                    reader.Read();
                                }

                                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Stats" && reader.GetAttribute(0) == abilityLevel.ToString())
                                {
                                    //Console.WriteLine("Level  = " + reader.GetAttribute(0));
                                    //Console.WriteLine("Cost   = " + reader.GetAttribute(1));
                                    //Console.WriteLine("Power  = " + reader.GetAttribute(2));

                                    ability.Level = int.Parse(reader.GetAttribute(0));
                                    ability.Cost = int.Parse(reader.GetAttribute(1));
                                    ability.Power = int.Parse(reader.GetAttribute(2));

                                    while (reader.NodeType != XmlNodeType.EndElement)
                                    {
                                        reader.Read();
                                    }
                                } //end if

                            }
                        }
                    }
                }
            }

            return ability;
        }

        /// <summary>
        /// This writes a new Classes.xml with basic classes.
        /// </summary>
        public void XMLWriteClasses()           //IN PROGRESS. NEED TO READ IT AFTER.
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;

            XmlWriter writer = XmlWriter.Create("Classes.xml", settings);
            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by the program.");
            writer.WriteStartElement("Classes");

            writer.WriteStartElement("Class");
            writer.WriteAttributeString("ID", "1");
            writer.WriteAttributeString("Name", "Barbarian");
            writer.WriteElementString("Weapon", "Sword");
            writer.WriteStartElement("Special");
            writer.WriteAttributeString("Agility", "-1");
            writer.WriteAttributeString("Endurance", "1");
            writer.WriteAttributeString("Intelligence", "-1");
            writer.WriteAttributeString("Strength", "1");
            writer.WriteAttributeString("Vitality", "1");
            writer.WriteAttributeString("Perception", "-1");
            writer.WriteEndElement();
            writer.WriteStartElement("Skill");
            writer.WriteAttributeString("Sword", "2");
            writer.WriteAttributeString("Axe", "3");
            writer.WriteAttributeString("Staff", "1");
            writer.WriteAttributeString("Bow", "1");
            writer.WriteEndElement();
            writer.WriteStartElement("Abilities");
            writer.WriteAttributeString("Ability1", "1Strike");
            writer.WriteAttributeString("Ability2", "2Chop");
            writer.WriteAttributeString("Ability3", "");
            writer.WriteAttributeString("Ability4", "");
            writer.WriteAttributeString("Ability5", "");
            writer.WriteEndElement();
            writer.WriteEndElement();

            writer.WriteStartElement("Class");
            writer.WriteAttributeString("ID", "2");
            writer.WriteAttributeString("Name", "Mage");
            writer.WriteElementString("Weapon", "Staff");
            writer.WriteStartElement("Special");
            writer.WriteAttributeString("Agility", "0");
            writer.WriteAttributeString("Endurance", "-1");
            writer.WriteAttributeString("Intelligence", "2");
            writer.WriteAttributeString("Strength", "-1");
            writer.WriteAttributeString("Vitality", "-1");
            writer.WriteAttributeString("Perception", "1");
            writer.WriteEndElement();
            writer.WriteStartElement("Skill");
            writer.WriteAttributeString("Sword", "1");
            writer.WriteAttributeString("Axe", "1");
            writer.WriteAttributeString("Staff", "3");
            writer.WriteAttributeString("Bow", "1");
            writer.WriteEndElement();
            writer.WriteStartElement("Abilities");
            writer.WriteAttributeString("Ability1", "1Freeze");
            writer.WriteAttributeString("Ability2", "1Fireball");
            writer.WriteAttributeString("Ability3", "1Shock");
            writer.WriteAttributeString("Ability4", "");
            writer.WriteAttributeString("Ability5", "");
            writer.WriteEndElement();
            
            writer.WriteEndDocument();

            writer.Flush();
            writer.Close();
        }

        public Classes XMLReadClassesReturn(string className)
        {
            XmlReader reader = XmlReader.Create("Classes.xml");
            Classes @class = new Classes();

            while (reader.Read())
            {
                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Classes")
                {
                    reader.Read();
                    while (reader.Depth >= 1)
                    {
                        reader.Read();
                        if (reader.NodeType == XmlNodeType.Element && reader.Name == "Class" && reader.GetAttribute(1) == className)
                        {
                            //Console.WriteLine("Name   = " + reader.GetAttribute(1));
                            @class.Name = reader.GetAttribute(1);

                            while (reader.NodeType != XmlNodeType.EndElement)
                            {
                                reader.Read();

                                if (reader.Name == "Weapon")
                                {
                                    while (reader.NodeType != XmlNodeType.EndElement)
                                    {
                                        reader.Read();
                                        if (reader.NodeType == XmlNodeType.Text)
                                        {
                                            @class.Weapon = reader.Value;
                                        }
                                    }
                                    reader.Read();
                                }

                                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Special")
                                {
                                    @class.SpecialBonusList = new List<int>();

                                    for (int i = 0; i < 6; i++)
                                    {
                                        @class.SpecialBonusList.Add(int.Parse(reader.GetAttribute(i)));
                                    }
                                    reader.Read();
                                }

                                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Skill")
                                {
                                    @class.WeaponProficiencies = new List<int>();

                                    for (int i = 0; i < 4; i++)         //NEED TO MAKE THE 4 VARIABLE (the number of possible class weapons)
                                    {
                                        @class.WeaponProficiencies.Add(int.Parse(reader.GetAttribute(i)));
                                    }
                                    reader.Read();
                                }

                                if (reader.NodeType == XmlNodeType.Element && reader.Name == "Abilities")
                                {
                                    @class.AbilityList = new List<string>();

                                    for (int i = 0; i < 5; i++)         //NEED TO MAKE THE 5 VARIABLE (the number of possible class abilities)
                                    {
                                        @class.AbilityList.Add(reader.GetAttribute(i));
                                    }
                                    reader.Read();
                                }
                            }
                        }
                    }
                }
            }

            return @class;
        }
    }
}